import os
import pandas as pd
from datetime import datetime
from aiogram import types
from aiogram.types import InputMediaPhoto, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext

from bot import dp, bot
from database import User, Review, get_session
from states import AdminAuthState, FilterReviewsState
from keyboards import (
    get_admin_panel_keyboard,
    get_back_to_admin_keyboard,
    get_reviews_navigation_keyboard,
    get_cancel_admin_auth_keyboard,
    get_class_filter_keyboard,
    get_filter_classes_1_4_keyboard,
    get_filter_classes_5_9_keyboard,
    get_filter_classes_10_11_keyboard
)
from handlers.menu import show_main_menu

# –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
ADMIN_PASSWORD = "admin123"

@dp.callback_query(lambda c: c.data == "admin_panel")
async def start_admin_auth(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = get_cancel_admin_auth_keyboard()
    await callback_query.message.edit_text(
        "üë®‚Äçüíº –í—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞:",
        reply_markup=keyboard
    )
    await state.set_state(AdminAuthState.waiting_for_password)

@dp.message(AdminAuthState.waiting_for_password)
async def check_admin_password(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º, —á—Ç–æ–±—ã –ø–∞—Ä–æ–ª—å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    await message.delete()
    
    if message.text == ADMIN_PASSWORD:
        # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        keyboard = get_admin_panel_keyboard()
        await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboard)
        await state.clear()
    else:
        # –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π
        keyboard = get_cancel_admin_auth_keyboard()
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞:",
            reply_markup=keyboard
        )

@dp.callback_query(lambda c: c.data == "cancel_admin_auth")
async def cancel_admin_auth(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    await callback_query.message.edit_text("–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–º–µ–Ω–µ–Ω")
    await show_main_menu(callback_query.message)
    await state.clear()

# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

@dp.callback_query(lambda c: c.data == "admin_home")
async def show_admin_panel(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = get_admin_panel_keyboard()
    
    try:
        # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ), —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback_query.message.delete()
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=keyboard
        )

@dp.callback_query(lambda c: c.data == "admin_stats")
async def show_admin_stats(callback_query: types.CallbackQuery):
    session = get_session()
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    total_users = session.query(User).count()
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –∫–ª–∞—Å—Å–∞–º
    class_stats = {}
    for user in session.query(User).all():
        if user.class_name in class_stats:
            class_stats[user.class_name] += 1
        else:
            class_stats[user.class_name] = 1
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    stats_text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
    stats_text += "–ü–æ –∫–ª–∞—Å—Å–∞–º:\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –≤—ã–≤–æ–¥–∞
    sorted_classes = sorted(class_stats.keys())
    for class_name in sorted_classes:
        stats_text += f"‚Ä¢ {class_name}: {class_stats[class_name]} —É—á–µ–Ω–∏–∫–æ–≤\n"
    
    session.close()
    
    keyboard = get_back_to_admin_keyboard()
    
    await callback_query.message.edit_text(stats_text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "admin_reviews")
async def show_admin_reviews(callback_query: types.CallbackQuery):
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    reviews = session.query(Review, User).join(User).order_by(Review.date.desc()).all()
    
    if not reviews:
        keyboard = get_back_to_admin_keyboard()
        await callback_query.message.edit_text("–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=keyboard)
        session.close()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤
    await send_review(callback_query.message, reviews, 0)
    session.close()

# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º

@dp.callback_query(lambda c: c.data == "admin_filter_reviews")
async def filter_reviews_menu(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤"""
    keyboard = get_class_filter_keyboard()
    
    try:
        # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            "üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤:",
            reply_markup=keyboard
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ), —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback_query.message.delete()
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤:",
            reply_markup=keyboard
        )

@dp.callback_query(lambda c: c.data == "filter_1_4")
async def show_filter_1_4(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–æ–≤ 1-4"""
    keyboard = get_filter_classes_1_4_keyboard()
    
    try:
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤:", 
            reply_markup=keyboard
        )
    except Exception as e:
        await callback_query.message.delete()
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤:",
            reply_markup=keyboard
        )

@dp.callback_query(lambda c: c.data == "filter_5_9")
async def show_filter_5_9(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–æ–≤ 5-9"""
    keyboard = get_filter_classes_5_9_keyboard()
    
    try:
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤:", 
            reply_markup=keyboard
        )
    except Exception as e:
        await callback_query.message.delete()
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤:",
            reply_markup=keyboard
        )

@dp.callback_query(lambda c: c.data == "filter_10_11")
async def show_filter_10_11(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–æ–≤ 10-11"""
    keyboard = get_filter_classes_10_11_keyboard()
    
    try:
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤:", 
            reply_markup=keyboard
        )
    except Exception as e:
        await callback_query.message.delete()
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤:",
            reply_markup=keyboard
        )

@dp.callback_query(lambda c: c.data.startswith("filter_class_"))
async def show_filtered_reviews(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
    class_name = callback_query.data.replace("filter_class_", "")
    
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã —Ç–æ–ª—å–∫–æ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    reviews = session.query(Review, User).join(User).filter(User.class_name == class_name).order_by(Review.date.desc()).all()
    
    if not reviews:
        await callback_query.message.edit_text(
            f"–û—Ç–∑—ã–≤–æ–≤ –æ—Ç –∫–ª–∞—Å—Å–∞ {class_name} –ø–æ–∫–∞ –Ω–µ—Ç.", 
            reply_markup=get_back_to_admin_keyboard()
        )
        session.close()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    review, user = reviews[0]
    
    review_text = f"–û—Ç–∑—ã–≤—ã –æ—Ç –∫–ª–∞—Å—Å–∞ {class_name} (1 –∏–∑ {len(reviews)})\n\n"
    review_text += f"–û—Ç: {user.full_name}\n"
    review_text += f"–î–∞—Ç–∞: {review.date.strftime('%d.%m.%Y %H:%M')}\n"
    review_text += f"–û—Ü–µ–Ω–∫–∞: {review.rating*'‚≠ê'}\n\n"
    review_text += f"{review.text}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å—Ç—Ä–µ
    keyboard = get_filtered_reviews_navigation_keyboard(0, len(reviews), class_name)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
    if review.photo_id:
        try:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            await bot.edit_message_media(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                media=InputMediaPhoto(
                    media=review.photo_id,
                    caption=review_text
                ),
                reply_markup=keyboard
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            await callback_query.message.delete()
            await bot.send_photo(
                chat_id=callback_query.message.chat.id,
                photo=review.photo_id,
                caption=review_text,
                reply_markup=keyboard
            )
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await callback_query.message.edit_text(review_text, reply_markup=keyboard)
    
    session.close()

def get_filtered_reviews_navigation_keyboard(index, total, class_name):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    buttons = []
    
    if index > 0:
        buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"filtered_review_{class_name}_{index-1}"))
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–¥–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    buttons.append(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="filtered_back"))
    
    if index < total - 1:
        buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"filtered_review_{class_name}_{index+1}"))
    
    return InlineKeyboardMarkup(inline_keyboard=[buttons])

@dp.callback_query(lambda c: c.data == "filtered_back")
async def filtered_back_to_filter(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º Callback, —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await callback_query.answer()
    try:
        await callback_query.message.delete()
    except Exception:
        pass
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    keyboard = get_class_filter_keyboard()
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith("filtered_review_"))
async def navigate_filtered_reviews(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–∑—ã–≤–∞–º"""
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data: filtered_review_–ö–õ–ê–°–°_–ò–ù–î–ï–ö–°
    parts = callback_query.data.split('_')
    class_name = parts[2]
    index = int(parts[3])
    
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    reviews = session.query(Review, User).join(User).filter(User.class_name == class_name).order_by(Review.date.desc()).all()
    
    if not reviews or index >= len(reviews):
        await callback_query.message.edit_text(
            f"–û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", 
            reply_markup=get_back_to_admin_keyboard()
        )
        session.close()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    review, user = reviews[index]
    
    review_text = f"–û—Ç–∑—ã–≤—ã –æ—Ç –∫–ª–∞—Å—Å–∞ {class_name} ({index+1} –∏–∑ {len(reviews)})\n\n"
    review_text += f"–û—Ç: {user.full_name}\n"
    review_text += f"–î–∞—Ç–∞: {review.date.strftime('%d.%m.%Y %H:%M')}\n"
    review_text += f"–û—Ü–µ–Ω–∫–∞: {review.rating*'‚≠ê'}\n\n"
    review_text += f"{review.text}"
    
    keyboard = get_filtered_reviews_navigation_keyboard(index, len(reviews), class_name)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
    if review.photo_id:
        try:
            await bot.edit_message_media(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                media=InputMediaPhoto(
                    media=review.photo_id,
                    caption=review_text
                ),
                reply_markup=keyboard
            )
        except Exception:
            await callback_query.message.delete()
            await bot.send_photo(
                chat_id=callback_query.message.chat.id,
                photo=review.photo_id,
                caption=review_text,
                reply_markup=keyboard
            )
    else:
        await callback_query.message.edit_text(review_text, reply_markup=keyboard)
    
    session.close()

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel

@dp.callback_query(lambda c: c.data == "admin_export_stats")
async def export_stats(callback_query: types.CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel —Ñ–∞–π–ª"""
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ñ–∞–π–ª –≥–æ—Ç–æ–≤–∏—Ç—Å—è
    await callback_query.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞...")
    
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    users = session.query(User).all()
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_data = []
    for user in users:
        user_data.append({
            'ID': user.user_id,
            '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': user.username,
            '–ü–æ–ª–Ω–æ–µ –∏–º—è': user.full_name,
            '–ö–ª–∞—Å—Å': user.class_name,
            '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏': user.registration_date
        })
    
    users_df = pd.DataFrame(user_data)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º
    class_stats = {}
    for user in users:
        if user.class_name in class_stats:
            class_stats[user.class_name] += 1
        else:
            class_stats[user.class_name] = 1
    
    class_data = []
    for class_name, count in class_stats.items():
        class_data.append({
            '–ö–ª–∞—Å—Å': class_name,
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤': count
        })
    
    classes_df = pd.DataFrame(class_data)
    classes_df = classes_df.sort_values('–ö–ª–∞—Å—Å')
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    session.close()
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –¥–≤—É–º—è –ª–∏—Å—Ç–∞–º–∏
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    excel_file = f"stats_{timestamp}.xlsx"
    
    with pd.ExcelWriter(excel_file) as writer:
        users_df.to_excel(writer, sheet_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', index=False)
        classes_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º', index=False)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    doc = FSInputFile(excel_file)
    await bot.send_document(
        chat_id=callback_query.message.chat.id,
        document=doc,
        caption="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await show_admin_panel(callback_query)
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(excel_file)

@dp.callback_query(lambda c: c.data == "admin_export_reviews")
async def export_reviews(callback_query: types.CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã –≤ Excel —Ñ–∞–π–ª"""
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ñ–∞–π–ª –≥–æ—Ç–æ–≤–∏—Ç—Å—è
    await callback_query.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞...")
    
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    reviews = session.query(Review, User).join(User).all()
    
    if not reviews:
        await callback_query.message.edit_text(
            "–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", 
            reply_markup=get_back_to_admin_keyboard()
        )
        session.close()
        return
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
    review_data = []
    for review, user in reviews:
        review_data.append({
            'ID –æ—Ç–∑—ã–≤–∞': review.id,
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': user.full_name,
            '–ö–ª–∞—Å—Å': user.class_name,
            '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞': review.text,
            '–û—Ü–µ–Ω–∫–∞': review.rating,
            '–ï—Å—Ç—å —Ñ–æ—Ç–æ': '–î–∞' if review.photo_id else '–ù–µ—Ç',
            '–î–∞—Ç–∞': review.date
        })
    
    reviews_df = pd.DataFrame(review_data)
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    session.close()
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    excel_file = f"reviews_{timestamp}.xlsx"
    
    reviews_df.to_excel(excel_file, index=False)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    doc = FSInputFile(excel_file)
    await bot.send_document(
        chat_id=callback_query.message.chat.id,
        document=doc,
        caption="üìù –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await show_admin_panel(callback_query)
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(excel_file)

async def send_review(message: types.Message, reviews, index):
    review, user = reviews[index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    review_text = f"–û—Ç–∑—ã–≤ #{index+1} –∏–∑ {len(reviews)}\n\n"
    review_text += f"–û—Ç: {user.full_name} ({user.class_name})\n"
    review_text += f"–î–∞—Ç–∞: {review.date.strftime('%d.%m.%Y %H:%M')}\n"
    review_text += f"–û—Ü–µ–Ω–∫–∞: {review.rating*'‚≠ê'}\n\n"
    review_text += f"{review.text}"
    
    keyboard = get_reviews_navigation_keyboard(index, len(reviews))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if review.photo_id:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=message.message_id,
                media=InputMediaPhoto(
                    media=review.photo_id,
                    caption=review_text
                ),
                reply_markup=keyboard
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –±–µ–∑ —Ñ–æ—Ç–æ)
            await message.delete()
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=review.photo_id,
                caption=review_text,
                reply_markup=keyboard
            )
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await message.edit_text(review_text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("review_"))
async def navigate_reviews(callback_query: types.CallbackQuery):
    index = int(callback_query.data.replace("review_", ""))
    
    session = get_session()
    reviews = session.query(Review, User).join(User).order_by(Review.date.desc()).all()
    
    await send_review(callback_query.message, reviews, index)
    session.close() 